using System.Extended.Reflection;

namespace UIMarkup.Protocol;

internal static class ProtocolTypePropertiesExtension
{
	/// <summary>
	/// Gets the properties for the element generated by the protocol
	/// </summary>
	/// <param name="type">IElement type</param>
	/// <exception cref="IElementTypeMismatchException"></exception>
	public static IEnumerable<PropertyInfo> GetImportantProperties(this Type type)
	{
		IElementTypeMismatchException.Verify(type);
		return ProtocolTypeProperties[type];
	}

	private static Dictionary<Type, IEnumerable<PropertyInfo>> ProtocolTypeProperties = new()
	{
		{ typeof(UIElement), GetProtocolPropertiesFromUIElement() },
		{ typeof(Control), GetProtocolPropertiesFromControl() }
	};

	private static IEnumerable<PropertyInfo> GetProtocolPropertiesFromUIElement()
	{
		return [
			new PropertyInfo(typeof(UIElement), typeof(string), nameof(UIElement.Name)),
			new PropertyInfo(typeof(UIElement), typeof(double), nameof(UIElement.Width)),
			new PropertyInfo(typeof(UIElement), typeof(double), nameof(UIElement.Height)),
			new PropertyInfo(typeof(UIElement), typeof(double), nameof(UIElement.MinWidth)),
			new PropertyInfo(typeof(UIElement), typeof(double), nameof(UIElement.MinHeight)),
			new PropertyInfo(typeof(UIElement), typeof(double), nameof(UIElement.MaxWidth)),
			new PropertyInfo(typeof(UIElement), typeof(double), nameof(UIElement.MaxHeight)),
			new PropertyInfo(typeof(UIElement), typeof(HorizontalAlignment), nameof(UIElement.HorizontalAlignment)),
			new PropertyInfo(typeof(UIElement), typeof(VerticalAlignment), nameof(UIElement.VerticalAlignment)),
			new PropertyInfo(typeof(UIElement), typeof(Color), nameof(UIElement.Color)),
			new PropertyInfo(typeof(UIElement), typeof(Style), nameof(UIElement.Style)),
			new PropertyInfo(typeof(UIElement), typeof(Thickness), nameof(UIElement.Margin)),
			new PropertyInfo(typeof(UIElement), typeof(double), nameof(UIElement.Opacity)),
			new PropertyInfo(typeof(UIElement), typeof(bool), nameof(UIElement.IsVisible)),
			new PropertyInfo(typeof(UIElement), typeof(bool), nameof(UIElement.IsEnabled))
	   ];
	}

	private static IEnumerable<PropertyInfo> GetProtocolPropertiesFromControl()
	{
		return [
			// Properties inherited from UIElement
			new PropertyInfo(typeof(UIElement), typeof(string), nameof(UIElement.Name)),
			new PropertyInfo(typeof(UIElement), typeof(double), nameof(UIElement.Width)),
			new PropertyInfo(typeof(UIElement), typeof(double), nameof(UIElement.Height)),
			new PropertyInfo(typeof(UIElement), typeof(double), nameof(UIElement.MinWidth)),
			new PropertyInfo(typeof(UIElement), typeof(double), nameof(UIElement.MinHeight)),
			new PropertyInfo(typeof(UIElement), typeof(double), nameof(UIElement.MaxWidth)),
			new PropertyInfo(typeof(UIElement), typeof(double), nameof(UIElement.MaxHeight)),
			new PropertyInfo(typeof(UIElement), typeof(HorizontalAlignment), nameof(UIElement.HorizontalAlignment)),
			new PropertyInfo(typeof(UIElement), typeof(VerticalAlignment), nameof(UIElement.VerticalAlignment)),
			new PropertyInfo(typeof(UIElement), typeof(Color), nameof(UIElement.Color)),
			new PropertyInfo(typeof(UIElement), typeof(Style), nameof(UIElement.Style)),
			new PropertyInfo(typeof(UIElement), typeof(Thickness), nameof(UIElement.Margin)),
			new PropertyInfo(typeof(UIElement), typeof(double), nameof(UIElement.Opacity)),
			new PropertyInfo(typeof(UIElement), typeof(bool), nameof(UIElement.IsVisible)),
			new PropertyInfo(typeof(UIElement), typeof(bool), nameof(UIElement.IsEnabled)),
			
			// Control properties
			new PropertyInfo(typeof(Control), typeof(Thickness), nameof(Control.CornerRadius)),
			new PropertyInfo(typeof(Control), typeof(Thickness), nameof(Control.Stroke)),
			new PropertyInfo(typeof(Control), typeof(Color), nameof(Control.StrokeColor))
	   ];
	}
}
